server:
  # Use different context-path to avoid session cookie overlapping
  contextPath: /uaa
  use-forward-headers: false
  timezone: Europe/Bucharest

captcha:
  useproxy: false
  proxyhost:
  faiureurl: /
  privatekey: '{cipher}e7556863a465ee3a567740cdf97d913fbabd16979bdecf449705a3ae9da650900a6dbc88b7fea82bdf9bea3f20e0f214bfee09915440e4514a3fdaba5f3013e8'

############### async parameters for default executor
DefaultExecutor:
  corePoolSize: 2
  maxPoolSize: 8
  queueCapacity: 10000
############### end async parameters

############  Actuator properties #############
management:
  context-path: ${server.contextPath}/manage
  port: ${server.port}
############  END Actuator properties #############
    
security.user.name: boborel
security.user.password: '{cipher}dbf312e6f4393b8b7527a907a5319efd3c4f7d098a9bd65d2b6a98408a0484e9'

vbb:
  securityRememberMeKey: '{cipher}f222f79ff6338ffc82d23398b5b70cdf2e4f6d1593ff25796c420c19497482b1'
  app.basic.authentication: '{cipher}53329d2fb6c7c439c5dea14de5ddcb3c710bba4d48dd89dc5d3834a347dee9765122fbd02ef323b090becfe281fbe4a4'

# Hystrix
hystrix:
  enabled: false
  command.default.execution.timeout.enabled: false
ribbon:
    ConnectTimeout: 10000 # Connect timeout used by Apache HttpClient
    ReadTimeout: 20000 # Read timeout used by Apache HttpClient
    maxAutoRetries: 2 # Max number of retries on the same server (excluding the first try)
    MaxAutoRetriesNextServer: 2 # Max number of next servers to retry (excluding the first server)

---
################################ DEV PROFILE ######################
spring:
  profiles: dev
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/vbb
    username: root
    password: asd1234
    maxActive: 100
    testOnBorrow: true
    validationQuery: SELECT 1
  jpa:
    database: MYSQL
    show-sql: false
    properties.hibernate:
      format_sql: true
      dialect: org.hibernate.dialect.MySQLDialect
      cache:
        use_second_level_cache: false
  devtools.livereload:
    enabled: true
    port: 35728

eureka:
  instance:
    statusPageUrlPath: /uaa/info
    homePageUrlPath: /uaa/
    healthCheckUrlPath: /uaa/health
    registryFetchIntervalSeconds: 1
    leaseRenewalIntervalInSeconds: 2
    leaseExpirationIntervalInSeconds: 5
    metadataMap:
      instanceId: ${spring.application.name}:${spring.application.instance_id:${server.port}}
  client:
    initialInstanceInfoReplicationIntervalSeconds: 5
    registerWithEureka: true
    fetchRegistry: true
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: ${vcap.services.vbb-discovery.credentials.uri:http://127.0.0.1:8761}/eureka/

application:
  url: http://localhost:8070/

vbb.gateway.url: http://localhost:8092
---
spring:
  profiles: docker
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://vbb-mysql:3306/vbb
    username: root
    password: asd1234
    maxActive: 100
    testOnBorrow: true
    validationQuery: SELECT 1
  jpa:
    database: MYSQL
    show-sql: false
    properties.hibernate:
      format_sql: false
      dialect: org.hibernate.dialect.MySQLDialect
      cache:
        use_second_level_cache: false
  resources:
    static-locations: classpath:/dist/

eureka:
  client:
    serviceUrl:
      defaultZone: http://vbb-discovery:8761/eureka/
  instance:
    leaseRenewalIntervalInSeconds: 3
    leaseExpirationIntervalInSeconds: 5
    preferIpAddress: true
    metadataMap:
      instanceId: ${spring.application.name}:${spring.application.instance_id:${server.port}}

logging:
  level:
    ROOT: INFO
---
################################ AWS PROFILE ######################
spring:
  profiles: aws
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://vbb-db.cxjcgxqqm6fl.eu-central-1.rds.amazonaws.com:3306/vbb
    username: root
    password: '{cipher}7a2ea55fb06bdb11d19a3ce08972fd18d5f2f963dd0ad39820479d68b7824335f70b1c2e0934dc413780ae0adfa9f3bd'
    maxActive: 100
    testOnBorrow: true
    validationQuery: SELECT 1
  jpa:
    database: MYSQL
    show-sql: false
    properties.hibernate:
      format_sql: true
      dialect: org.hibernate.dialect.MySQLDialect
      cache:
        use_second_level_cache: false

logging:
  level:
    ROOT: INFO
    #org.springframework.security: INFO

eureka:
  instance:
    statusPageUrlPath: ${management.context-path}/info
    healthCheckUrlPath: ${management.context-path}/health
  environment: test
  datacenter: cloud
  client:
    eurekaServerDNSName: test.vbb.com
    region: eu-central-1
    registerWithEureka: true
    fetchRegistry: true
    eurekaServerURLContext: eureka
    eurekaServerPort: 8761
    useDnsForFetchingServiceUrls: true    

facebook:
  app:
    id: '{cipher}b106cafe74a5742a87bbdf1ec4c780f85096e6638baf398f427167c13955a75e'
    secret: '{cipher}2cf5df49e08ce110d5c6177f46b0d9116202db37c1951a12463adaa3178a31f390b443f70887bc74bc68d64678fbcfb72d9c7e8e411143a955196cf42d0f3cf0'
  client:
    clientId: '{cipher}b106cafe74a5742a87bbdf1ec4c780f85096e6638baf398f427167c13955a75e'
    clientSecret: '{cipher}2cf5df49e08ce110d5c6177f46b0d9116202db37c1951a12463adaa3178a31f390b443f70887bc74bc68d64678fbcfb72d9c7e8e411143a955196cf42d0f3cf0'
    accessTokenUri: https://graph.facebook.com/oauth/access_token
    userAuthorizationUri: https://www.facebook.com/dialog/oauth
    tokenName: oauth_token
    authenticationScheme: query
    clientAuthenticationScheme: form
    scope: email,public_profile
  resource:
    userInfoUri: https://graph.facebook.com/me
